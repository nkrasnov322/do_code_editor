#Область ОбработчикиСобытийФормы

&НаСервере
Процедура РК_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	РК_Сервер.ПриСозданииНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РК_ПередЗаписьюПосле(Отказ, ПараметрыЗаписи)
	Если Не РК_Клиент.ЕстьПолеHTML(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;	
	Объект[ЭтотОбъект.РК_РеквизитКода] = View().getText();
КонецПроцедуры

&НаКлиенте
Процедура РК_ПриОткрытииПосле(Отказ)
	Если Не РК_Клиент.ЕстьПолеHTML(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	ОпределитьРазделительПути();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляРедактора

&НаКлиенте
Процедура ConsoleOnReady(Элемент)
	
	Если ЭтотОбъект.РК_ИсходникиЗагружены Тогда
		
			ИнициализацияРедактора();
			//АктивироватьДополнительныеФункции();
			ЗагрузитьКод();
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		РК_Клиент.ОбработатьСобытиеРедактора(ДанныеСобытия.Event.eventData1C, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияРедактора

&НаКлиенте
Процедура ЗагрузитьКод() Экспорт
	вью = View();
	вью.minimap(Ложь);
	вью.setText(Объект[ЭтотОбъект.РК_РеквизитКода], Неопределено, Ложь);
	вью.setOriginalText(Объект[ЭтотОбъект.РК_РеквизитКода]);
КонецПроцедуры

&НаСервере
Функция ТекстОписанияПользовательскихОбъектов()
	НовыйОбъект = Новый Структура;
	НовыйОбъект.Вставить("properties", Новый Структура);
	Дерево = РеквизитФормыВЗначение("КонтекстВыполнения");
	Для Каждого Строка Из Дерево.Строки Цикл
		РК_Сервер.РазобратьСтрокуДерева(НовыйОбъект.properties, Строка, "ПолныйПуть");		
	КонецЦикла;
	customObjects = Новый Структура;
	customObjects.Вставить("Параметры", НовыйОбъект);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Новый Структура("customObjects", customObjects));
	ТекстJSON = ЗаписьJSON.Закрыть();
	Возврат ТекстJSON;
КонецФункции

&НаКлиенте
Функция ИндексныйФайл()
	
	Возврат ЭтотОбъект.РК_КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
	
КонецФункции

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	ЭтотОбъект.РК_HTML = СкопированныйФайл;
	ЭтотОбъект.РК_ИсходникиЗагружены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	Попытка
		Файл = Новый ЧтениеZipФайла(ЭтотОбъект.РК_КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(ЭтотОбъект.РК_КаталогИсходников);
		Файл = Новый ЗаписьТекста(ЭтотОбъект.РК_КаталогИсходников + ЭтотОбъект.РК_ВерсияОбработки + ".ver");
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
		ТочкаВхода = ЭтотОбъект.РК_КаталогИсходников + "index.html";
		ЭтотОбъект.РК_ИндексныйФайл = ИндексныйФайл();
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ЭтотОбъект.РК_ИндексныйФайл);
	Исключение
		Сообщить("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки()); //, Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект);
	ИмяФайла = ЭтотОбъект.РК_КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(ЭтотОбъект.РК_АдресМакета);
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()
	
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект);
	НачатьУдалениеФайлов(Оповещение, ЭтотОбъект.РК_КаталогИсходников, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда		
		ЭтотОбъект.РК_ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = ЭтотОбъект.РК_КаталогИсходников + "index.html";
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ЭтотОбъект.РК_ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда	
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(ЭтотОбъект.РК_КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(ЭтотОбъект.РК_КаталогИсходников + ЭтотОбъект.РК_ВерсияОбработки + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе		
		Сообщить("Не удалось создать каталог для исходников"); // , Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект);
	ФайлНаДиске = Новый Файл(ЭтотОбъект.РК_КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	ЭтотОбъект.РК_КаталогИсходников = ИмяКаталога + "bsl_console\";
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект);
	НачатьСозданиеКаталога(Оповещение, ЭтотОбъект.РК_КаталогИсходников);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники()
	
	Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект);
	НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
		ИзвлечьИсходники();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьМетаданные() Экспорт
	
	View().clearMetadata();
	ОбновитьСписокОбщихМодулей();
	ОбновитьПользовательскиеОбъекты();
	//View().updateMetadata(ТекстОписанияОбъекта());	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПользовательскиеОбъекты()
	View().updateMetadata(ТекстОписанияПользовательскихОбъектов());	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора()
	
	Инфо = Новый СистемнаяИнформация();
	
	View().init(Инфо.ВерсияПриложения);
	View().setOption("autoResizeEditorLayout", Истина);
	View().setOption("renderQueryDelimiters", Истина);
	View().setOption("generateModificationEvent", Истина);
	View().hideScrollX();
	View().hideScrollY();
	
	ПодключитьОбработчикОжидания("ОбнулитьМетаданные", 1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция View() Экспорт
	
	Возврат Элементы.ПолеHTML.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекст(Текст, Позиция, УчитыватьОтступПервойСтроки)
	
	View().setText(Текст, Позиция, УчитыватьОтступПервойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстКода() Экспорт
	Объект[ЭтотОбъект.РК_РеквизитКода] = ЭтотОбъект.View().getText();	
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекст(ДляВыполнения = Ложь)
	
	Код =  View().getText();
	
	Возврат Код;
	
КонецФункции

#КонецОбласти

#Область КонструкторЗапросов

&НаКлиенте
Процедура ПриЗакрытииКонструктораЗапросов(Текст, ДопПараметры) Экспорт
	
	Если Текст <> Неопределено Тогда
		
		Если Не View().queryMode Тогда
			Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
			Текст = СтрЗаменить(Текст, """", """""");
			Текст = """" + Текст + """";
		КонецЕсли;
		
		УстановитьТекст(Текст, ДопПараметры, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Текст, ДопПараметры)
	
	Конструктор = Новый КонструкторЗапроса();
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Попытка
			Конструктор.Текст = Текст;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(, "Ошибка в тексте запроса:" + Символы.ПС + Инфо.Причина.Описание);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапросов", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовыйЗапрос(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторЗапроса("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьТекстЗапроса(Текст)
	
	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ВызватьКонструкторЗапроса(ПараметрыЗапроса) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовыйЗапрос", ЭтотОбъект);
		ТекстВопроса = "Не найден текст запроса." + Символы.ПС + "Создать новый запрос?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстЗапроса = ПодготовитьТекстЗапроса(ПараметрыЗапроса.text);
		ОткрытьКонструкторЗапроса(ТекстЗапроса, ПараметрыЗапроса.range);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторФорматнойСтроки

&НаКлиенте
Процедура ПриЗакрытииКонструктораФорматнойСтроки(ФорматнаяСтрока, ДопПараметры) Экспорт
	
	Если ФорматнаяСтрока <> Неопределено Тогда	
		ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "'", "");
		ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
		УстановитьТекст(ФорматнаяСтрока, ДопПараметры, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры)
	
	Конструктор = Новый КонструкторФорматнойСтроки();
	Попытка			
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(, "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовуюФорматнуюСтроку(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторФорматнойСтроки("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьКонструкторФорматнойСтроки(ПараметрыСтроки) Экспорт
	
	Если ПараметрыСтроки = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовуюФорматнуюСтроку", ЭтотОбъект);
		ТекстВопроса = "Форматная строка не найдена." + Символы.ПС + "Создать новую форматную строку?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ПараметрыСтроки.range);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДинамическоеОбновлениеМетаданных

&НаКлиенте
Функция ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = РК_Сервер.ПолучитьОписаниеОбъектаМетаданных(ПараметрыЗапроса, АдресОбновления);
	
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = РК_Сервер.ПолучитьСписокОбъектовМетаданных(ПараметрыЗапроса, АдресОбновления);
		
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаСобытияПолученияМетаданных(Событие) Экспорт
	
	ПараметрыЗапроса = НРег(Событие.metadata);
	ВызыватьПодсказку = (Событие.trigger = "suggestion");
	ДанныеОбновлены = Ложь;
	
	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда
		
		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");
		
		Если ЧастиЗапроса[0] = "module" Тогда
			
			Если ЧастиЗапроса.Количество() = 2 Тогда
				ДанныеОбновлены = ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса);
			Иначе
				ДанныеОбновлены = ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса);
			КонецЕсли;
			
		Иначе
			
			ДанныеОбновлены = ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеОбновлены = ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса);
		
	КонецЕсли;
	
	Если Событие.trigger = "suggestion" И ДанныеОбновлены Тогда
		View().triggerSuggestions();
	КонецЕсли;
	
	Если Событие.trigger = "snippet"  Тогда
		View().updateSnippetByGUID(Событие.snippet_guid);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияПолученияПеременной(Событие) Экспорт
	
	ИмяПеременной = Событие.variableName;
	ИдентификаторПеременной = Событие.variableId;
	
	ПутьКДанным = Событие.variablePath;
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "undefined", "");
	
	Описание = РК_Сервер.ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной, ПутьКДанным, Объект.РК_АдресХраненияПеременных);
	
	Если ЗначениеЗаполнено(Описание) Тогда
		View().updateVariableDescription(ИдентификаторПеременной, Описание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОбщихМодулейКлиент

&НаСервере
Функция СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей) Экспорт
	
	Файл = Новый ЗаписьJSON();
	Файл.УстановитьСтроку();
	Попытка
	   ЗаписатьJSON(Файл, КоллекцияОбщихМодулей.Общие);
	Исключение
	   ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	ЗначениеКоллекции = Файл.Закрыть();
	
	Возврат ПоместитьВоВременноеХранилище(ЗначениеКоллекции, Новый УникальныйИдентификатор());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей) Экспорт
	
	// Соответствие между именем общего неглобального модуля в нижнем регистре
	// и именем модуля, как оно задано в конфигураторе для правильной загрузки
	// текстов общих модулей
	ОбщиеМодули = Новый Соответствие();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Общие Цикл
		ОбщиеМодули.Вставить(НРег(Обход.Ключ), Обход.Ключ);
	КонецЦикла;
	
	ЭтотОбъект.РК_ИменаОбщихМодулей = Новый ФиксированноеСоответствие(ОбщиеМодули);
	
	// Именя глобальных модулей для загрузки текстов
	Модули = Новый Массив();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Глобальные Цикл
		Модули.Добавить(Обход.Ключ);
	КонецЦикла;
	
	ЭтотОбъект.РК_ГлобальныйМодули = Новый ФиксированныйМассив(Модули);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМодульИзИсходников(ПолноеИмяФайла)
	
	СмещениеИмениВПути = 3;
	
	Путь = СтрРазделить(ПолноеИмяФайла, ЭтотОбъект.РК_РазделительПути, Ложь);
	ИмяМодуля = Путь[Путь.Количество() - СмещениеИмениВПути];
	
	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ПолноеИмяФайла);
	ТекстМодуля = Текст.ПолучитьТекст();
	
	Возврат Новый Структура("Имя, Текст", ИмяМодуля, ТекстМодуля);
	
КонецФункции

&НаКлиенте
Функция НормализоватьПуть(Путь)
	
	Путь = СокрЛП(Путь);
	
	Если Прав(Путь, 1) <> ЭтотОбъект.РК_РазделительПути Тогда
		Путь = Путь + ЭтотОбъект.РК_РазделительПути;
	КонецЕсли;
	
	Возврат Путь;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКаталогИсходногоКода()
	
	КаталогИсходногоКода = ЭтотОбъект.РК_КаталогИсходногоКодаКонфигурации;
	Если ЗначениеЗаполнено(КаталогИсходногоКода) Тогда
		КаталогИсходногоКода = НормализоватьПуть(КаталогИсходногоКода);
	КонецЕсли;
	
	Возврат КаталогИсходногоКода;
	
КонецФункции

&НаКлиенте
Процедура ВопросЗагрузкиОбщихМодулейЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Состояние("Загрузка общих модулей...");
		Файлы = НайтиФайлы(ДопПараметры.КаталогМодулей, "Ext" + ЭтотОбъект.РК_РазделительПути + "*.bsl", Истина);
		
		Для Каждого Файл Из Файлы Цикл
			ОбщийМодуль = ПолучитьМодульИзИсходников(Файл.ПолноеИмя);
			View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст);
		КонецЦикла;
		
		Состояние("Общие модули загружены");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Глобальный)
	
	ЗагруженоФункций = 0;
	
	ИмяВКонфигураторе = ЭтотОбъект.РК_ИменаОбщихМодулей.Получить(НРег(ИмяМодуля));
	
	Если ИмяВКонфигураторе = Неопределено Тогда
		ИмяВКонфигураторе = ИмяМодуля;
	КонецЕсли;
	
	ФайлМодуля = СтрШаблон("CommonModules%1%2%1Ext%1Module.bsl", ЭтотОбъект.РК_РазделительПути, ИмяВКонфигураторе);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Если ФайлНаДиске.Существует() Тогда
		ОбщийМодуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ЗагруженоФункций = View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст, Глобальный);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки)
	
	ЗагруженоФункций = 0;
	ТипМодуля = СтруктураВыгрузки.ТипМодуля;
	
	ИмяТипа = ?(ТипМодуля = "manager", "ManagerModule", "ObjectModule");
	
	ФайлМодуля = СтрШаблон("%1%2Ext%2%3.bsl", СтруктураВыгрузки.ИмяКаталога, ЭтотОбъект.РК_РазделительПути, ИмяТипа);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Если ФайлНаДиске.Существует() Тогда
		Модуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ИмяКоллекции = РК_Сервер.ПолучитьИмяКоллекцииМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		АдресЗагрузки = СтрШаблон("%1.items.%2.%3", ИмяКоллекции, СтруктураВыгрузки.ИмяОбъектаМетаданных, ТипМодуля);
		ЗагруженоФункций = View().parseMetadataModule(Модуль.Текст, АдресЗагрузки);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьГлобальныеМодули()
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	ЕстьГлобальныеМодули = (ЭтотОбъект.РК_ГлобальныйМодули <> Неопределено И 0 < ЭтотОбъект.РК_ГлобальныйМодули.Количество());
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЕстьГлобальныеМодули Тогда
		
		КаталогМодулей = КаталогИсходногоКода + "CommonModules";
		
		КаталогНаДиске = Новый Файл(КаталогМодулей);
		
		Если КаталогНаДиске.Существует() Тогда
			
			Индекс = 0;
			
			Пока Индекс < ЭтотОбъект.РК_ГлобальныйМодули.Количество() Цикл
				ИмяМодуля = ЭтотОбъект.РК_ГлобальныйМодули.Получить(Индекс);
				ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Истина);
				Индекс = Индекс + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 2;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		ИмяМодуля = ЧастиЗапроса[1];
		
		ЗагруженоФункций = ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Ложь);
		
		Если 0 < ЗагруженоФункций Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 4;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		СтруктураВыгрузки = Новый Структура();
		СтруктураВыгрузки.Вставить("ТипМодуля"        , ЧастиЗапроса[1]);
		СтруктураВыгрузки.Вставить("ТипМетаданных"    , ЧастиЗапроса[2]);
		СтруктураВыгрузки.Вставить("ОбъектМетаданных" , ЧастиЗапроса[3]);
		
		РК_Сервер.ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, ЭтотОбъект.РК_РазделительПути);
		
		Если ЗначениеЗаполнено(СтруктураВыгрузки.ИмяКаталога) Тогда
			
			ЗагруженоФункций = ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки);
			
			Если 0 < ЗагруженоФункций Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокОбщихМодулей()
	
	КоллекцияМетаданных = ПолучитьИзВременногоХранилища(ЭтотОбъект.РК_АдресОбщихМодулей);
	
	Если КоллекцияМетаданных <> Неопределено Тогда
		Результат = View().updateMetadata(КоллекцияМетаданных, "commonModules.items");
		ЗагрузитьГлобальныеМодули();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее 

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(Значение, ЗначениеПоУмолчанию = 0)
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, ЗначениеПоУмолчанию);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт
	
	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		ЗакрытьКонсоль(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль)
	
	ПараметрыОповещения = Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль);
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьПредупреждение(Оповещение, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРазделительПути()
	
	ЭтотОбъект.РК_РазделительПути = ПолучитьРазделительПути();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТемы()
	
	ИмяТемы = Неопределено;
	
	Имена = Новый Соответствие();
	Имена.Вставить("СветлаяТема", "bsl-white");
	Имена.Вставить("ТемнаяТема", "bsl-dark");
	
	Для Каждого Элемент Из Элементы.Тема.ПодчиненныеЭлементы Цикл
		Если Элемент.Пометка Тогда
			ИмяТемы = Имена[Элемент.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяТемы;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьТему(Тема)
	
	View().setTheme(Тема);
	
КонецПроцедуры

&НаСервере
Функция ЭтотОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Функция ПолучитьМакет(ИмяМакета)
	
	Возврат ЭтотОбъект().ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаСервере
Функция ПолучитьТекстМакета(ИмяМакета, УдалятьПереносыСтрок)
	
	Макет = ПолучитьМакет(ИмяМакета);
	Текст = Макет.ПолучитьТекст();
	
	Если УдалятьПереносыСтрок Тогда
		Текст =  СтрЗаменить(Текст, Символы.ПС, " ");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Функция ВебДокументДоступен()
	
	Если Элементы.ПолеHTML.Документ <> Неопределено И Элементы.ПолеHTML.Документ.defaultView <> Неопределено Тогда
		Попытка
			ПолучитьТекст();
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПользовательскиеФункции()
	
	JSON = ПолучитьТекстМакета("ПользовательскиеФункции", Истина);
	Результат = View().updateCustomFunctions(JSON);
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		СообщитьПользователю("Пользовательские функции успешно загружены!");
	Иначе
		Ошибка = "Не удалось загрузить пользовательские функции: " + Символы.ПС + Результат.errorDescription;
		ВывестиОшибку(Ошибка, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт
	
	ЭтотОбъект.РК_ИндексныйФайл = "";
	
	Если ДопПараметры.СтандартноеЗакрытие Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКонсоль(СтандартноеЗакрытие)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.РК_ИндексныйФайл) Тогда
		ПараметрыОповещения = Новый Структура("СтандартноеЗакрытие", СтандартноеЗакрытие);
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтотОбъект, ПараметрыОповещения);
		НачатьУдалениеФайлов(Оповещение, ЭтотОбъект.РК_ИндексныйФайл);
	Иначе
		Если СтандартноеЗакрытие Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеБыстрымиПодсказками()
	
	Элементы.БыстрыеПодсказки.Пометка = ЭтотОбъект.БыстрыеПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКартыКода()
	
	Элементы.КартаКода.Пометка = ЭтотОбъект.ВидимостьКартыКода;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСтрокиСостояния()
	
	Элементы.СтрокаСостояния.Пометка = ЭтотОбъект.ВидимостьСтрокиСостояния;
	
	Если ЭтотОбъект.ВидимостьСтрокиСостояния Тогда
		View().showStatusBar();
	Иначе
		View().hideStatusBar();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УправлениеВидимостьюПробеловТабуляций()

	Элементы.ОтображатьПробелыИТабуляции.Пометка = ЭтотОбъект.ОтображатьПробелыИТабуляции;
	View().renderWhitespace(ЭтотОбъект.ОтображатьПробелыИТабуляции);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСравнения()
	
	Элементы.СравнитьСОригиналом.Видимость = ЗначениеЗаполнено(ЭтотОбъект.ИмяСохраненногоФайла);
	
КонецПроцедуры

#КонецОбласти