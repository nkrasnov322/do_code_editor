#Область ПроцедурыФорм

Процедура ПриСозданииНаСервере(ЭтотОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РК_НастройкиПользователей.АдресВыгрузкиДО КАК АдресВыгрузкиДО
		|ИЗ
		|	РегистрСведений.РК_НастройкиПользователей КАК РК_НастройкиПользователей
		|ГДЕ
		|	РК_НастройкиПользователей.Пользователь = &Пользователь
		|	И РК_НастройкиПользователей.Включить";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаНастройки = РезультатЗапроса.Выбрать();
	ВыборкаНастройки.Следующий();
	
	ДобавляемыеРеквизиты = Новый Массив; 

	СтрокаСтроковыеРеквизиты = "РК_АдресХраненияПеременных,РК_КаталогИсходногоКодаКонфигурации,РК_HTML,РК_АдресМакета,РК_АдресОбщихМодулей," 
									+ "РК_РеквизитКода,РК_ВерсияОбработки,РК_ИндексныйФайл,РК_РазделительПути,РК_КаталогИсходников";
	МассивСтроковыхРеквизитов = СтрРазделить(СтрокаСтроковыеРеквизиты, ",");
	Для Каждого Стр Из МассивСтроковыхРеквизитов Цикл
		НовыйРеквизит = Новый РеквизитФормы(Стр, Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0))); 
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);		
	КонецЦикла;
	
	НовыйРеквизит = Новый РеквизитФормы("РК_ГлобальныйМодули", Новый ОписаниеТипов()); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("РК_ИменаОбщихМодулей", Новый ОписаниеТипов()); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("РК_ИсходникиЗагружены", Новый ОписаниеТипов("Булево")); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ЭтотОбъект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭтотОбъект.РК_КаталогИсходногоКодаКонфигурации = ВыборкаНастройки.АдресВыгрузкиДО;	
	ЭлементРодитель = ОпределитьЭлементРодительИУстановитьРеквизитВыражения(ЭтотОбъект);
	
	НовыйЭлемент = ЭтотОбъект.Элементы.Вставить("ПолеHTML", Тип("ПолеФормы"), ЭлементРодитель.Родитель, ЭлементРодитель);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	НовыйЭлемент.ПутьКДанным = "РК_HTML";
	НовыйЭлемент.Заголовок = "Выражение";
	НовыйЭлемент.УстановитьДействие("ДокументСформирован", "ConsoleOnReady");
	НовыйЭлемент.УстановитьДействие("ПриНажатии", "ConsoleOnClick");
	
	СкрытьЛишниеЭлементыФормы(ЭтотОбъект);	
	ЭтотОбъект.РК_АдресМакета = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет("рк_src"), Новый УникальныйИдентификатор());
	
	КоллекцияОбщихМодулей = РК_Сервер.ПолучитьКоллекциюОбщихМодулей();
	ЭтотОбъект.РК_АдресОбщихМодулей = ЭтотОбъект.СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей);
	ЭтотОбъект.ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей);
КонецПроцедуры

Функция ОпределитьЭлементРодительИУстановитьРеквизитВыражения(ЭтотОбъект)

	ЭлементРодитель = Неопределено;
	ИмяФормы = ЭтотОбъект.ИмяФормы;
	Элементы = ЭтотОбъект.Элементы;
	Если ИмяФормы = "Справочник.АлгоритмыПроверки.Форма.ФормаЭлемента" Тогда 
		ЭтотОбъект.РК_РеквизитКода = "ВыражениеУсловия";
		ЭлементРодитель = Элементы.ОтветственныйВнутри;
	ИначеЕсли ИмяФормы = "Справочник.ПравилаАвтозаполненияФайлов.Форма.ВводСкрипта" Тогда 
		ЭтотОбъект.РК_РеквизитКода = "Скрипт";
		ЭлементРодитель = Элементы.Комментарий;
	ИначеЕсли ИмяФормы = "Справочник.СкриптыСхемДляКомплексныхПроцессов.Форма.ФормаЭлемента" 
		Или ИмяФормы = "Справочник.СкриптыУсловийСхемДляКомплексныхПроцессов.Форма.ФормаЭлемента" Тогда
		ЭтотОбъект.РК_РеквизитКода = "Выражение";
		ЭлементРодитель = Элементы.ГруппаВыражениеИПараметры;
	ИначеЕсли ИмяФормы = "Справочник.УсловияЗадач.Форма.ФормаЭлемента" Тогда
		ЭтотОбъект.РК_РеквизитКода = "ВыражениеУсловия";
		ЭлементРодитель = Элементы.ВыражениеИДерево;
	ИначеЕсли ИмяФормы = "Справочник.ОбластиПоискаЧатБота.Форма.ФормаЭлемента"
		Или ИмяФормы = "Справочник.ВычисляемыеПараметрыЧатБота.Форма.ФормаЭлемента" Тогда
		ЭтотОбъект.РК_РеквизитКода = "Скрипт";
		ЭлементРодитель = Элементы.Скрипт;		
	Иначе
		ЭлементРодитель = Элементы.Выражение;
		ЭтотОбъект.РК_РеквизитКода = "Выражение";		
	КонецЕсли;	
	Возврат ЭлементРодитель;
	
КонецФункции

Процедура СкрытьЛишниеЭлементыФормы(ЭтотОбъект)
	
	Элементы = ЭтотОбъект.Элементы;
	ИмяФормы = ЭтотОбъект.ИмяФормы;
	Если ИмяФормы = "Справочник.АлгоритмыПроверки.Форма.ФормаЭлемента" Тогда 
		Элементы.ВыражениеИДерево.Видимость = Ложь;	
	ИначеЕсли ИмяФормы = "Справочник.ПравилаАвтозаполненияФайлов.Форма.ВводСкрипта" Тогда 
		Элементы.Комментарий.Видимость = Ложь;
	ИначеЕсли ИмяФормы = "Справочник.СкриптыСхемДляКомплексныхПроцессов.Форма.ФормаЭлемента"
		Или ИмяФормы = "Справочник.СкриптыУсловийСхемДляКомплексныхПроцессов.Форма.ФормаЭлемента" Тогда
		Элементы.ГруппаВыражениеИПараметры.Видимость = Ложь;
	ИначеЕсли ИмяФормы = "Справочник.УсловияЗадач.Форма.ФормаЭлемента" Тогда
		Элементы.ВыражениеИДерево.Видимость = Ложь;	
	ИначеЕсли ИмяФормы = "Справочник.ОбластиПоискаЧатБота.Форма.ФормаЭлемента"
		Или ИмяФормы = "Справочник.ВычисляемыеПараметрыЧатБота.Форма.ФормаЭлемента" Тогда
		Элементы.Скрипт.Видимость = Ложь;		
	Иначе
		Элементы.Выражение.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

Функция РазобратьСтрокуДерева(РодительОбъект, СтрокаДерева, ИмяРеквизитаИмени) Экспорт
	
	ЧастиПолногоИмени = СтрРазделить(СтрокаДерева[ИмяРеквизитаИмени], ".");
	ИмяОбъекта = ЧастиПолногоИмени[ЧастиПолногоИмени.ВГраница()];
	Если Прав(ИмяОбъекта, 3) = "[0]" Тогда
		ИмяОбъекта = Лев(ИмяОбъекта, СтрДлина(ИмяОбъекта) - 3);
	КонецЕсли;

	ТелоОбъекта = Новый Структура("properties", Новый Структура);
	Для Каждого Строка Из СтрокаДерева.Строки Цикл
		РазобратьСтрокуДерева(ТелоОбъекта.properties, Строка, ИмяРеквизитаИмени);
	КонецЦикла;	
	
	Если ТелоОбъекта.properties.Количество() = 0 Тогда 
		РодительОбъект.Вставить(ИмяОбъекта, Новый Структура);
	Иначе
		РодительОбъект.Вставить(ИмяОбъекта, ТелоОбъекта);		
	КонецЕсли;
	
КонецФункции

Функция ЕстьПолеHTML(ЭтотОбъект) Экспорт
	Возврат Не ЭтотОбъект.Элементы.Найти("ПолеHTML") = Неопределено;
КонецФункции

#КонецОбласти

#Область ИнициализацияРедактора

Функция ДополнитьСтроку(Знач Результат, СимволовДополнить, Дополнение = " ", Слева = Истина)
	
	Стр = "";
	
	Для Сч = 1 По СимволовДополнить Цикл
		Стр = Стр + Дополнение;
	КонецЦикла;
	
	Возврат ?(Слева, Стр + Результат, Результат + Стр);
	
КонецФункции

Функция ЭтоСсылка(Ссылка)
	
	ЭтоСсылка = Ложь;
	
	ТипЗнч = ТипЗнч(Ссылка);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если ОбъектМетаданных <> Неопределено Тогда
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Массив = СтрРазделить(ПолноеИмя, ".");
		Массив[0] = Массив[0] + "Ссылка";
		ИмяТипа = СтрСоединить(Массив, ".");
		
		Попытка
			ЭтоСсылка = (ТипЗнч = Тип(ИмяТипа));
		Исключение
			ЭтоСсылка = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ЭтоСсылка;
	
КонецФункции

Функция ПолучитьИмяОбъектаМетаданных(Ссылка)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	
	Если ОбъектМетаданных <> Неопределено Тогда
		Возврат СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".").Получить(0);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ЭтоТабличнаяЧасть(Ссылка)
	
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	
	Если Результат <> Неопределено Тогда
		
		Если ОбъектМетаданныхИмеетТЧ(Результат.Родитель().ПолноеИмя()) Тогда
			Возврат Результат.Родитель().ТабличныеЧасти.Найти(Результат.Имя) <> Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоСтрокаТабличнойЧасти(Ссылка)
	
	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если Результат <> Неопределено Тогда
		
		Родитель = Результат.Родитель();
		ИмяРодителя = Родитель.ПолноеИмя();
		
		Если ОбъектМетаданныхИмеетТЧ(ИмяРодителя) Тогда
			
			ЧастиИмени = СтрРазделить(ИмяРодителя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);
			
			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);
			
			Если ТабличнаяЧасть <> Неопределено Тогда
				
				ИмяТипа = СтрШаблон("%1ТабличнаяЧастьСтрока.%2.%3", Имя1, Имя2, ТабличнаяЧасть.Имя);
				
				Попытка
					Возврат (ТипЗнч = Тип(ИмяТипа));
				Исключение
					Возврат Ложь;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоЗаписьНабораЗаписей(Ссылка)
	
	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если Результат <> Неопределено Тогда
		
		ПолноеИмя = Результат.ПолноеИмя();
		
		Если 0 < СтрНайти(ПолноеИмя, "Регистр") Или 0 < СтрНайти(ПолноеИмя, "Register") Тогда
			
			ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);
			ИмяТипа = СтрШаблон("%1Запись.%2", Имя1, Имя2);
			
			Попытка
				Возврат (ТипЗнч = Тип(ИмяТипа));
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьРеквизитыСтрокиТабличнойЧасти(Строка)
	
	Реквизиты = Новый Массив();
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Строка));
	
	Если Результат <> Неопределено Тогда
		
		Родитель = Результат.Родитель();
		
		Если ОбъектМетаданныхИмеетТЧ(Родитель.ПолноеИмя()) Тогда
			
			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);
			
			Реквизиты.Добавить(Новый Структура("Имя", "НомерСтроки"));
			
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				Реквизиты.Добавить(Реквизит);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция ПолучитьРеквизитыНабораЗаписей(Запись)
	
	Реквизиты = Новый Массив();
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Запись));
	
	Если Результат <> Неопределено Тогда
		
		Для Каждого Измерение Из Результат.Измерения Цикл
			Реквизиты.Добавить(Измерение);
		КонецЦикла;
		
		Для Каждого Ресурс Из Результат.Ресурсы Цикл
			Реквизиты.Добавить(Ресурс);
		КонецЦикла;
		
		Для Каждого Реквизит Из Результат.Реквизиты Цикл
			Реквизиты.Добавить(Реквизит);
		КонецЦикла;
		
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция ЭтоМенеджерЗаписиРегистра(Значение)
	
	ЭтоМенеджерЗаписи = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если Результат <> Неопределено Тогда
		
		Имя = Результат.ПолноеИмя();
		
		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоМенеджерЗаписи = (Тип("РегистрСведенийМенеджерЗаписи." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоМенеджерЗаписи = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоМенеджерЗаписи;
	
КонецФункции

Функция ЭтоНаборЗаписейРегистра(Значение)
	
	ЭтоНаборЗаписей = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если Результат <> Неопределено Тогда
		
		Имя = Результат.ПолноеИмя();
		
		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрСведенийНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрНакопления") = 1 И Метаданные.РегистрыНакопления.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрНакопленияНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрРасчета") = 1 И Метаданные.РегистрыРасчета.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрРасчетаНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрБухгалтери") = 1 И Метаданные.РегистрыБухгалтерии.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрБухгалтерииНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоНаборЗаписей = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоНаборЗаписей;
	
КонецФункции

Функция ЭтоПеречисление(Значение)
	
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	Возврат Результат <> Неопределено И СтрНайти(Результат.ПолноеИмя(), "Перечисление") = 1;
	
КонецФункции

Функция ПолучитьПредставлениеСсылки(Значение, КешСсылок, htmlTag)
	
	Представление = КешСсылок[Значение];
	
	Если Представление = Неопределено Тогда
		
		Попытка
			Если Не Значение.Пустая() Тогда
				Ссылка = ПолучитьНавигационнуюСсылку(Значение);
				Если htmlTag Тогда
					Представление = СтрШаблон("<a href='%1'>%2</a>", Ссылка, Строка(Значение));
				Иначе
					Представление = СтрШаблон("[%1](%2)", Строка(Значение), Ссылка);
				КонецЕсли;
			Иначе
				Представление = "";
			КонецЕсли;
		Исключение
			Представление = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		КешСсылок[Значение] = Представление;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", Заголовок, Значение.Количество()));
	Индекс = 0;
	
	Для Каждого СтрокаТЗ Из Значение Цикл
		
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);
		
		Для Каждого Колонка Из Значение.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(СтрокаТЗ[Колонка.Имя], Смещение, КешСсылок));
		КонецЦикла;  
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

Функция ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, СтрокаДерева, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	Индекс = 0;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл
	
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);
		
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(Строка[Колонка.Имя], Смещение, КешСсылок));
		КонецЦикла;  
				
		Индекс = Индекс + 1; 
		
		МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Строка, Смещение + 1, КешСсылок));
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

Функция ПолучитьПредставлениеДереваЗначений(Дерево, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", "Дерево значений", Дерево.Строки.Количество()));
	МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Дерево, Смещение, КешСсылок));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

Функция ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок)
	
	Таблица = Значение.Владелец();
	
	Представление = "**Строка таблицы значений:**" + Символы.ПС;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Представление = Представление + Символы.ПС;
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		Представление = Представление + Маркер + Колонка.Имя + ": ";
		Представление = Представление + ПолучитьПредставлениеПеременной(Значение[Колонка.Имя], Смещение, КешСсылок);
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок)
	
	ТипЗнч = ТипЗнч(Значение);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);
	МассивСтрок = Новый Массив();
	
	МассивСтрок.Добавить(СтрШаблон("**%1:**", ТипЗнч));
	МассивСтрок.Добавить(Символы.ПС);
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Для Каждого Измерение Из ОбъектМетаданных.Реквизиты Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Для Каждого Измерение Из ОбъектМетаданных.Ресурсы Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

Функция ПолучитьПредставлениеСпискаЗначенийМассива(МассивСписок, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	
	ТипЗнч = ТипЗнч(МассивСписок);
	ЭтоМассив = (ТипЗнч = Тип("Массив"));
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч, МассивСписок.Количество()) + Символы.ПС);
	Индекс = 0;
	
	Для Каждого Значение Из МассивСписок Цикл
		
		Маркер = ДополнитьСтроку("- (" + Индекс + ") ", Смещение * 4, " ");
		
		Если ЭтоМассив Тогда
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение, Смещение, КешСсылок));
		Иначе
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение.Значение, Смещение, КешСсылок));
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

Функция ПолучитьПредставлениеЭлементаСпискаЗначений(ЭлементСписка, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Элемент списка значений**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(ЭлементСписка.Значение, Смещение, КешСсылок));
	
	Представление = ЭлементСписка.Представление;
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Представление = Строка(ЭлементСписка.Значение);
	КонецЕсли;
	
	МассивСтрок.Добавить(Маркер + "Представление: " + Представление);
	МассивСтрок.Добавить(Маркер + "Пометка: " + ЭлементСписка.Пометка);
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

Функция ПолучитьПредставлениеКлючаЗначения(КлючЗначение, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Ключ и значение**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Ключ: " + КлючЗначение.Ключ);
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(КлючЗначение.Значение, Смещение, КешСсылок));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

Функция ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч(Значение), Значение.Количество()));
		
	Для Каждого Стр Из Значение Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Стр.Ключ + ": " + ПолучитьПредставлениеПеременной(Стр.Значение, Смещение, КешСсылок));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

Функция ПолучитьПредставлениеЗапроса(Запрос, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Запрос**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Не установлен");
	Иначе
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Установлен");
	КонецЕсли;
	
	ПредставлениеПараметров = ПолучитьПредставлениеСтруктурыСоответствия(Запрос.Параметры, Смещение + 1, КешСсылок);
	МассивСтрок.Добавить(ПредставлениеПараметров);
	
	МаркерТекста = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
	МассивСтрок.Добавить(Маркер + "Текст: " + Символы.ПС + МаркерТекста + Запрос.Текст);
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

Функция ПолучитьПредставлениеПеременной(Значение, Знач Смещение, КешСсылок)
	
	Представление = "";
	ТипЗнч = ТипЗнч(Значение);
	
	Смещение = Смещение + 1;
	
	Если ТипЗнч = Тип("Число") Или
		ТипЗнч = Тип("Строка") Или
		ТипЗнч = Тип("Булево") Или
		ТипЗнч = Тип("Дата") Тогда
		Представление = Строка(Значение);
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Представление = "Null";
	ИначеЕсли ТипЗнч = Тип("Структура") Или
		ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("Массив") Или
		ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = ПолучитьПредставлениеСпискаЗначенийМассива(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = ПолучитьПредставлениеКлючаЗначения(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = ПолучитьПредставлениеЭлементаСпискаЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		Заголовок = НСтр("en = 'Value table'; ru = 'Таблица значений'");
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = ПолучитьПредставлениеДереваЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Представление = ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Представление = Строка(Значение);
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = ПолучитьПредставлениеЗапроса(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Ложь);
	Иначе
		Представление = Строка(Значение);
		Если ПустаяСтрока(Представление) Тогда
			Представление = Строка(ТипЗнч);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(ЗначенияПеременных)
	
	Описание = Новый Структура();
	КешСсылок = Новый Соответствие();
	
	Для Каждого Обход ИЗ ЗначенияПеременных Цикл
		Представление = ПолучитьПредставлениеПеременной(Обход.Значение, -1, КешСсылок);
		Описание.Вставить(Обход.Ключ, Представление);
	КонецЦикла;
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Описание);
	
	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ПолучениеЗначенийПеременныхДляВыводаВТабло

Функция ПолучитьКартинкуДляПредставленияСсылки(Ссылка)
	
	ИмяОбъекта = ПолучитьИмяОбъектаМетаданных(Ссылка);
	
	Имена = Новый Соответствие();
	Имена.Вставить("Справочник", "catalog");
	Имена.Вставить("Catalog", "catalog");
	Имена.Вставить("Документ", "document");
	Имена.Вставить("Document", "document");
	Имена.Вставить("БизнесПроцесс", "bprocess");
	Имена.Вставить("BusinessProcess", "bprocess");
	Имена.Вставить("Задача", "task");
	Имена.Вставить("Task", "task");
	
	Картинка = Имена[ИмяОбъекта];
	
	Если Картинка = Неопределено Тогда
		Картинка = "structure";
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

Функция ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьКДанным, КешСсылок)
	
	Представление = "";
	ТипЗнч = ТипЗнч(Значение);
	Картинка = "";
	Класс = "";
	
	Если ТипЗнч = Тип("Число") Тогда
		Представление = Строка(Значение);
		Картинка = "int";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Строка") Тогда
		Представление = Строка(Значение);
		Картинка = "string";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Булево") Тогда
		Представление = Строка(Значение);
		Картинка = "boolean";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Дата") Тогда
		Картинка = "date";
		Представление = Строка(Значение);
		Класс = "final";
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Картинка = "null";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("УникальныйИдентификатор") Тогда
		Представление = Строка(Значение);
		Картинка = "uuid";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ДвоичныеДанные") Тогда
		Картинка = "binary";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Картинка") Тогда
		Картинка = "picture";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Структура") Или
		ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("Массив") Или
		ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Картинка = "table";
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Строки.Количество());
		Картинка = "tree";
		Если Значение.Строки.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
		Представление = "";
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Картинка = "storage";
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "query";
	ИначеЕсли ТипЗнч = Тип("МенеджерВременныхТаблиц") Тогда
		Представление = "";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
		Представление = СтрШаблон("Движения (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("ТабличныйДокумент") Тогда
		Картинка = "tabular";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ТекстовыйДокумент") Или
		ТипЗнч = Тип("ЧтениеТекста") Или
		ТипЗнч = Тип("ЧтениеXML") Или
		ТипЗнч = Тип("ЧтениеJSON") Или
		ТипЗнч = Тип("ЧтениеHTML") Или
		ТипЗнч = Тип("ЗаписьJSON") Или
		ТипЗнч = Тип("ЗаписьXML") Или
		ТипЗнч = Тип("ЗаписьТекста") Или
		ТипЗнч = Тип("ЧтениеZipФайла") Или
		ТипЗнч = Тип("Файл") Тогда
		Картинка = "text";
		Класс = "final";
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
		Картинка = "enum";
		Класс = "final";
	ИначеЕсли ЭтоСтрокаТабличнойЧасти(Значение) Тогда
		Представление = "";
		Картинка = "table";
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = СтрШаблон("Табличная часть (%1)", Значение.Количество());
		Картинка = "table";
	ИначеЕсли ЭтоЗаписьНабораЗаписей(Значение) Тогда
		Картинка = "table";
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = СтрШаблон("Набор записей (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Картинка = "structure";
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Истина);
		Если СтрНайти(Представление, "</a>") Тогда
			Представление = СтрЗаменить(Представление, """", "");
			Представление = СтрЗаменить(Представление, Символы.Таб, "");
		КонецЕсли;
		Картинка = ПолучитьКартинкуДляПредставленияСсылки(Значение);
	Иначе
		Попытка
			Представление = Строка(Значение);
		Исключение
			Представление = Строка(ТипЗнч);
		КонецПопытки;
		Класс = "final";
	КонецЕсли;
	
	Переменная = Новый Структура();
	Переменная.Вставить("label", Имя);
	Переменная.Вставить("value", Представление);
	Переменная.Вставить("type" , Строка(ТипЗнч));
	Переменная.Вставить("path" , ПутьКДанным);
	Переменная.Вставить("class", Класс);
	
	Если ЗначениеЗаполнено(Картинка) Тогда
		Переменная.Вставить("icon", Картинка + ".png");
	КонецЕсли;
	
	Возврат Переменная;
	
КонецФункции

Функция НовыйИдентификаторПеременной()
	
	Возврат "var_" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	
КонецФункции

Функция ПолучитьОписаниеСсылочнойПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	ОбъектМетаданных = Ссылка.Метаданные();
	ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	
	ЗначениеРеквизита = Ссылка.УникальныйИдентификатор();
	ПутьРеквизита = ПутьКДанным + ".УникальныйИдентификатор";
	ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, "УникальныйИдентификатор", ПутьРеквизита, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
	
	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмяОбъектаМетаданных) Тогда
		
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			
			Если Реквизит.Имя <> "Ссылка" Тогда
				ЗначениеРеквизита = Ссылка[Реквизит.Имя];
				ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
				ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, Реквизит.Имя, ПутьРеквизита, КешСсылок);
				ИдентификаторПеременной = НовыйИдентификаторПеременной();
				ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		ЗначениеРеквизита = Ссылка[Реквизит.Имя];
		ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, Реквизит.Имя, ПутьРеквизита, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
	КонецЦикла;
	
	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмяОбъектаМетаданных) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ЗначениеРеквизита = Ссылка[ТабличнаяЧасть.Имя];
			ПутьРеквизита = ПутьКДанным + "." + ТабличнаяЧасть.Имя;
			ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, ТабличнаяЧасть.Имя, ПутьРеквизита, КешСсылок);
			ИдентификаторПеременной = НовыйИдентификаторПеременной();
			ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
		КонецЦикла;
		
	КонецЕсли;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыЗначений(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЗ, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеСтрокиТаблицыЗначений(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Колонки = СтрокаТаблицы.Владелец().Колонки;
	
	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаТаблицы[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеСтрокиТабличнойЧасти(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыСтрокиТабличнойЧасти(СтрокаТЧ);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = СтрокаТЧ[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеЗаписиНабораЗаписей(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеДереваЗначений(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + ".Строки[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеСтрокиДереваЗначений(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Колонки = СтрокаДерева.Владелец().Колонки;
	
	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаДерева[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Если 0 < СтрокаДерева.Строки.Количество() Тогда
		ПутьСтроки = ПутьКДанным + ".Строки";
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева.Строки, "Строки", ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЕсли;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеКоллекцииСтрокДереваЗначений(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеСоответствияСтруктуры(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ЭтоСоответствие = (ТипЗнч(Соответствие) = Тип("Соответствие"));
	ДанныеПеременной = Новый Структура();
	
	Для Каждого Обход Из Соответствие Цикл
		
		Если ЭтоСоответствие Тогда
			ПутьЗначения = ПутьКДанным + "[&quote;" + Обход.Ключ + "&quote;]";
		Иначе
			ПутьЗначения = ПутьКДанным + "." + Обход.Ключ;
		КонецЕсли;
		
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Обход.Ключ, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
		
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеМассива(Массив, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Массив, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Значение Из Массив Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеКлючаИЗначения(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Ключ";
	Имя = "Ключ";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Ключ, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеЭлементаСпискаЗначений(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Пометка";
	Имя = "Пометка";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Пометка, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Представление";
	Имя = "Представление";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Представление, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеСпискаЗначений(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Обход Из СписокЗначений Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеКоллекцииДвижений(Движения, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Движения, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Движение Из Движения Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Движение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции 

Функция ПолучитьОписаниеМенеджераЗаписейРегистра(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеЗапроса(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Текст";
	Имя = "Текст";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Текст, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Параметры";
	Имя = "Параметры";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Параметры, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".МенеджерВременныхТаблиц";
	Имя = "МенеджерВременныхТаблиц";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.МенеджерВременныхТаблиц, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеХранилищаЗначения(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Данные = ХранилишеЗначения.Получить();
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	Путь = ПутьКДанным + ".Получить()";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Данные, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеХранилища = Новый Структура(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеХранилища);
	
	Возврат Переменная;
	
КонецФункции

Функция ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной, ПутьКДанным, АдресХраненияПеременных) Экспорт
	
	Данные = ПолучитьИзВременногоХранилища(АдресХраненияПеременных);
	ХранилищеПеременных = Данные.ХранилищеПеременных;
	КешСсылок = Данные.КэшСсылок;
	
	Попытка
		
		Описание = Неопределено;
		Путь = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИдентификаторПеременной);
		Путь = СтрЗаменить(Путь, "&quote;", """");
		ЗначениеПеременной = Вычислить("ХранилищеПеременных." + Путь);
		Путь = СтрЗаменить(Путь, """", "&quote;");
		ТипЗнч = ТипЗнч(ЗначениеПеременной);
		
		Если ТипЗнч = Тип("ТаблицаЗначений") Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
			Описание = ПолучитьОписаниеДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
			Описание = ПолучитьОписаниеКоллекцииСтрокДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Соответствие") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Массив") Тогда
			Описание = ПолучитьОписаниеМассива(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Структура") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
			Описание = ПолучитьОписаниеКлючаИЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СписокЗначений") Тогда
			Описание = ПолучитьОписаниеСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
			Описание = ПолучитьОписаниеЭлементаСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
			Описание = ПолучитьОписаниеЗапроса(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
			Описание = ПолучитьОписаниеКоллекцииДвижений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
			Описание = ПолучитьОписаниеХранилищаЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСсылка(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСсылочнойПеременной(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСтрокаТабличнойЧасти(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСтрокиТабличнойЧасти(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоТабличнаяЧасть(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоЗаписьНабораЗаписей(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеЗаписиНабораЗаписей(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоНаборЗаписейРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоМенеджерЗаписиРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеМенеджераЗаписейРегистра(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		КонецЕсли;
		
		Если Описание <> Неопределено Тогда
			Результат = Новый Структура(ИдентификаторПеременной, Описание);
			Запись = Новый ЗаписьJSON();
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Результат);
			Возврат Запись.Закрыть();
		Иначе
			ВызватьИсключение("Неизвестный тип переменной");
		КонецЕсли;
		
		Данные.КэшСсылок = КешСсылок;
		ПоместитьВоВременноеХранилище(Данные, АдресХраненияПеременных);
		
	Исключение
		Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаОбщихМодулейКлиент

Процедура ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, РазделительПути) Экспорт
	
	СтруктураВыгрузки.Вставить("ИмяКаталога", Неопределено);
	ЧастейМетаданных = 2;
	
	Попытка
		ПолноеИмя = Метаданные[СтруктураВыгрузки.ТипМетаданных][СтруктураВыгрузки.ОбъектМетаданных].ПолноеИмя();
	Исключение
		ПолноеИмя = "";
	КонецПопытки;
	
	Имена = СтрРазделить(ПолноеИмя, ".", Ложь);
	
	Если Имена.Количество() = ЧастейМетаданных Тогда
		
		КаталогТипа = ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		
		Если ЗначениеЗаполнено(КаталогТипа) Тогда
			ИндексОбъекта = 1;
			СтруктураВыгрузки.Вставить("ИмяОбъектаМетаданных", Имена[ИндексОбъекта]);
			СтруктураВыгрузки.ИмяКаталога = СтрШаблон("%1%2%3", КаталогТипа, РазделительПути, Имена[ИндексОбъекта]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция СтруктураРеквизита(Имя, Ссылка = Неопределено)

	Реквизит = Новый Структура();
	Реквизит.Вставить("name", Имя);
	
	Если Ссылка <> Неопределено Тогда
		Реквизит.Вставить("ref" , Ссылка);
	КонецЕсли;
	
	Возврат Реквизит;
	
КонецФункции

Функция ПолучитьПользовательскиеОбъекты()
	
	Объекты = Неопределено;
	
	Если Метаданные.Справочники.Количество() <> 0 И Метаданные.Документы.Количество() <> 0 Тогда
		
		Объекты = Новый Структура();
		
		// Первый объект назовём "_СтруктураВыгрузки", у него будет 3 реквизита.
		// Реквизит "Номенклатура" будет ссылаться на соответствующий справочник,
		// если он есть, или на первый попавшийся справочник
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Справочник = Метаданные.Справочники.Найти("Номенклатура");
		Если Справочник = Неопределено Тогда
			Справочник = Метаданные.Справочники.Получить(0);
		КонецЕсли;
		
		// Ссылка на объект указывается как catalogs.ИмяСправочника или documents.ИмяДокумента
		// catalogs и documents - соответственно имена объектов, хранящих описание метаданных в файле bslMetadata.js
		// В модуле объекта есть функция ПолучитьСвязьСОбъектомМетаданных(Реквизит), которая принимает реквизит
		// Её достаточно просто модифицировать, чтобы она принимала, например, тип и сразу отдавала связь в нужном виде
		
		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);
		
		Реквизит = СтруктураРеквизита("Цена товара");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);
		
		Реквизит = СтруктураРеквизита("Остаток товара на складе");
		ПользовательскийОбъект.properties.Вставить("Остаток", Реквизит);
		
		Объекты.Вставить("_СтруктураВыгрузки", ПользовательскийОбъект);
		
		// Второй объект будет называться "_Партия", у него будет 3 реквизита,
		// два из которых "ПриходнаяНакладная" и "Номенклатура" будут ссылаться
		// на документ и справочник соотвественно
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровУслуг");
		Если Документ = Неопределено Тогда
			Документ = Метаданные.Документы.Найти("ПоступлениеТоваров");
			Если Документ = Неопределено Тогда
				Документ = Метаданные.Документы.Получить(0);
			КонецЕсли;
		КонецЕсли;
		
		Реквизит = СтруктураРеквизита("Документ закупки", "documents." + Документ.Имя);
		ПользовательскийОбъект.properties.Вставить("ПриходнаяНакладная", Реквизит);
		
		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);
		
		Реквизит = Новый Структура("name", "Закупочная цена");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);
		
		Объекты.Вставить("_Партия", ПользовательскийОбъект);
		
		// Теперь загоняем наши объекты в JSON-строку
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, Новый Структура("customObjects", Объекты));
			Объекты = Файл.Закрыть();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сохранить пользовательские объекты:" + Символы.ПС + ОписаниеОшибки());
			Объекты = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Объекты;
	
КонецФункции

#КонецОбласти

#Область ДинамическоеОбновлениеМетаданных

Функция ОписатьОбщиеМодули(Коллекция, ФильтрГлобальный = Ложь)
	
	ОписаниеКоллекции = Новый Структура();
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		Если ОбъектМетаданных.Глобальный = ФильтрГлобальный Тогда
			ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

Функция ПолучитьКоллекциюОбщихМодулей() Экспорт
	
	КоллекцияОбщихМодулей = Новый Структура();
	КоллекцияОбщихМодулей.Вставить("Общие"     , ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Ложь));
	КоллекцияОбщихМодулей.Вставить("Глобальные", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Истина));
	
	Возврат КоллекцияОбщихМодулей;
	
КонецФункции

Функция ИмяМетаданных(ПолноеИмя)
	
	Возврат СтрПолучитьСтроку(СтрЗаменить(ПолноеИмя, ".", Символы.ПС), 1);
	
КонецФункции

Функция ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

Функция ОбъектМетаданныхИмеетИзмерения(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("РегистрСведений");
	Объекты.Добавить("РегистрНакопления");
	Объекты.Добавить("РегистрБухгалтерии");
	Объекты.Добавить("РегистрРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

Функция ОбъектМетаданныхИмеетТЧ(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("Отчет");
	Объекты.Добавить("Обработка");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

Функция ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("ПланСчетов");	
	Объекты.Добавить("ПланВидовХарактеристик");
	Объекты.Добавить("ПланВидовРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

Функция ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция) Экспорт
	
	ОписаниеКоллекции = Новый Структура();
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

Функция ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов) Экспорт
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники"                 , "catalogs");
	СоответствиеИмен.Вставить("catalogs"                    , "catalogs");
	СоответствиеИмен.Вставить("документы"                   , "documents");
	СоответствиеИмен.Вставить("documents"                   , "documents");
	СоответствиеИмен.Вставить("регистрысведений"            , "infoRegs");
	СоответствиеИмен.Вставить("informationregisters"        , "infoRegs");
	СоответствиеИмен.Вставить("регистрынакопления"          , "accumRegs");
	СоответствиеИмен.Вставить("accumulationregisters"       , "accumRegs");
	СоответствиеИмен.Вставить("регистрыбухгалтерии"         , "accountRegs");
	СоответствиеИмен.Вставить("accountingregisters"         , "accountRegs");
	СоответствиеИмен.Вставить("регистрырасчета"             , "calcRegs");
	СоответствиеИмен.Вставить("calculationregisters"        , "calcRegs");
	СоответствиеИмен.Вставить("обработки"                   , "dataProc");
	СоответствиеИмен.Вставить("dataprocessors"              , "dataProc");
	СоответствиеИмен.Вставить("отчеты"                      , "reports");
	СоответствиеИмен.Вставить("reports"                     , "reports");
	СоответствиеИмен.Вставить("перечисления"                , "enums");
	СоответствиеИмен.Вставить("enums"                       , "enums");
	СоответствиеИмен.Вставить("планысчетов"                 , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts"            , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы"              , "businessProcesses");
	СоответствиеИмен.Вставить("businessprocesses"           , "businessProcesses");
	СоответствиеИмен.Вставить("задачи"                      , "tasks");
	СоответствиеИмен.Вставить("tasks"                       , "tasks");
	СоответствиеИмен.Вставить("планыобмена"                 , "exchangePlans");
	СоответствиеИмен.Вставить("exchangeplans"               , "exchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик"     , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes" , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета"           , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes"    , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы"                   , "constants");
	СоответствиеИмен.Вставить("constants"                   , "constants");
	СоответствиеИмен.Вставить("внешниеисточникиданных"      , "externalDataSources");
	СоответствиеИмен.Вставить("externaldatasources"         , "externalDataSources");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

Функция ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(ТипОбъектов)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники"                 , "Catalogs");
	СоответствиеИмен.Вставить("catalogs"                    , "Catalogs");
	СоответствиеИмен.Вставить("документы"                   , "Documents");
	СоответствиеИмен.Вставить("documents"                   , "Documents");
	СоответствиеИмен.Вставить("регистрысведений"            , "InformationRegisters");
	СоответствиеИмен.Вставить("informationregisters"        , "InformationRegisters");
	СоответствиеИмен.Вставить("регистрынакопления"          , "AccumulationRegisters");
	СоответствиеИмен.Вставить("accumulationregisters"       , "AccumulationRegisters");
	СоответствиеИмен.Вставить("регистрыбухгалтерии"         , "AccountingRegisters");
	СоответствиеИмен.Вставить("accountingregisters"         , "AccountingRegisters");
	СоответствиеИмен.Вставить("регистрырасчета"             , "CalculationRegisters");
	СоответствиеИмен.Вставить("calculationregisters"        , "CalculationRegisters");
	СоответствиеИмен.Вставить("обработки"                   , "DataProcessors");
	СоответствиеИмен.Вставить("dataprocessors"              , "DataProcessors");
	СоответствиеИмен.Вставить("отчеты"                      , "Reports");
	СоответствиеИмен.Вставить("reports"                     , "Reports");
	СоответствиеИмен.Вставить("перечисления"                , "Enums");
	СоответствиеИмен.Вставить("enums"                       , "Enums");
	СоответствиеИмен.Вставить("планысчетов"                 , "ChartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts"            , "ChartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы"              , "BusinessProcesses");
	СоответствиеИмен.Вставить("businessprocesses"           , "BusinessProcesses");
	СоответствиеИмен.Вставить("задачи"                      , "Tasks");
	СоответствиеИмен.Вставить("tasks"                       , "Tasks");
	СоответствиеИмен.Вставить("планыобмена"                 , "ExchangePlans");
	СоответствиеИмен.Вставить("exchangeplans"               , "ExchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик"     , "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes" , "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета"           , "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes"    , "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы"                   , "Constants");
	СоответствиеИмен.Вставить("constants"                   , "Constants");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

Функция ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи)
	
	Связь = "";
	
	Типы = Реквизит.Тип.Типы();
	
	Индекс = 0;
	
	Пока Индекс < Типы.Количество() И НЕ ЗначениеЗаполнено(Связь) Цикл
		
		Тип = Типы[Индекс];
		
		СвязьТипа = Связи[Тип];
		
		Если СвязьТипа = Неопределено Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
			Если ОбъектМетаданных <> Неопределено Тогда
				
				// Сейчас связи описыватьются только для справочников и документов.
				// При желании, пожертвовав скоростью получения описания всех метаданных
				// сюда же можно добавить следующие элементы:
				// Метаданные.БизнесПроцессы businessProcesses
				// Метаданные.Задачи tasks
				// Метаданные.ПланыВидовРасчета chartsOfCalculationTypes
				// Метаданные.ПланыВидовХарактеристик chartsOfCharacteristicTypes
				// Метаданные.ПланыОбмена exchangePlans
				// Метаданные.ПланыСчетов сhartsOfAccounts
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					Связь = "catalogs." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					Связь = "documents." + ОбъектМетаданных.Имя;
				Иначе
					Связь = "";
				КонецЕсли;
				
			КонецЕсли;
			
			Связи[Тип] = Связь;
			
		Иначе
			
			Связь = СвязьТипа;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Связь;
	
КонецФункции

Процедура ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи)
	
	Связь = ?(Связи <> Неопределено, ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи), "");
	
	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);
	
	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;
	
	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);
	
КонецПроцедуры

Функция ПолучитьСписокОбъектовМетаданных(ТипОбъектов, АдресОбновления) Экспорт
	
	ОписаниеМетаданных = "";
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		Коллекция = Метаданные[ТипОбъектов];
		
		СписокОбъектов = ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция);
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СписокОбъектов);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
		АдресОбновления = ИмяКоллекции + ".items";
		
	КонецЕсли;
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

Процедура ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя)
	
	ТипРегистра = "";
	
	Если ИмяМетаданных(ПолноеИмя) = "РегистрСведений" Тогда
		
		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Непериодический Тогда
			ТипРегистра = "nonperiodical";
		Иначе
			ТипРегистра = "periodical";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных(ПолноеИмя) = "РегистрНакопления" Тогда
		
		Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипРегистра = "balance";
		Иначе
			ТипРегистра = "turnovers";
		КонецЕсли; 
		
	Иначе
		
		ТипРегистра = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРегистра) Тогда
		ДополнительныеСвойства.Вставить("type", ТипРегистра);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных)
	
	Если ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя) Тогда
				
		Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаПланаСчетов.Код КАК Код,
			|	ТаблицаПланаСчетов.ИмяПредопределенныхДанных КАК Имя
			|ИЗ
			|	&Таблица КАК ТаблицаПланаСчетов
			|ГДЕ
			|	ТаблицаПланаСчетов.Предопределенный");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл 
				ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
			КонецЦикла;
			
		Иначе
			
			Предопределенные = ОбъектМетаданных.ПолучитьИменаПредопределенных();
			
			Для Каждого Имя Из Предопределенные Цикл
				ОписаниеПредопределенных.Вставить(Имя, "");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов,
	ОписаниеРесурсов, ДополнительныеСвойства, Связи)
	
	Если ОбъектМетаданныхИмеетИзмерения(ПолноеИмя) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Измерения.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Измерения.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Ресурсы.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Ресурсы.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРесурсов, Реквизит, Связи);
		КонецЦикла;
		
		ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя,
	ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи)
	
	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмя) Тогда
				
		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: " + ТабличнаяЧасть.Синоним));
			
			ОписаниеТабличнойЧасти = Новый Структура();
			
			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
				ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
			КонецЦикла;
			
			Для НомерРеквизитаТЧ = 0 По ТабличнаяЧасть.Реквизиты.Количество() - 1 Цикл
				РеквизитТЧ = ТабличнаяЧасть.Реквизиты.Получить(НомерРеквизитаТЧ);
				ДобавитьОписаниеРеквизита(ОписаниеТабличнойЧасти, РеквизитТЧ, Связи);
			КонецЦикла;
			
			СтруктураТабличнойЧасти = Новый Структура();
			СтруктураТабличнойЧасти.Вставить("properties", ОписаниеТабличнойЧасти);
			
			Если 0 < ОписаниеТабличнойЧасти.Количество() Тогда
				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, СтруктураТабличнойЧасти);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.Реквизиты.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.Реквизиты.Получить(НомерРеквизита);
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи)
	
	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя) Тогда
					
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.ЗначенияПеречисления.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.ЗначенияПеречисления.Получить(НомерРеквизита);
		ОписаниеРеквизитов.Вставить(Реквизит.Имя, Новый Структура("name", Реквизит.Синоним));
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных)
	
	СтруктураИсточника = Новый Структура();
	
	ОписаниеТаблиц = Новый Структура();
	
	Для Каждого Таблица Из ОбъектМетаданных.Таблицы Цикл
		
		ОбъектныеДанные = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные;
		ТипТаблицы = ?(Таблица.ТипДанныхТаблицы = ОбъектныеДанные, "ObjectData", "NonobjectData");
		
		СтруктураТаблицы = Новый Структура();
		СтруктураТаблицы.Вставить("tableDataType", ТипТаблицы);
		
		ПоляТаблицы = Новый Структура();
		Для Каждого Поле Из Таблица.Поля Цикл
			ПоляТаблицы.Вставить(Поле.Имя, Новый Структура("name", Поле.Синоним));
		КонецЦикла;
		
		СтруктураТаблицы.Вставить("properties", ПоляТаблицы);
		
		ОписаниеТаблиц.Вставить(Таблица.Имя, СтруктураТаблицы);
		
	КонецЦикла;
	
	СтруктураИсточника.Вставить("tables", Новый Структура("items", ОписаниеТаблиц));
	
	Возврат СтруктураИсточника;
	
КонецФункции

Процедура ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных)
	
	СтруктураИсточника = ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных);
	Для Каждого Обход Из СтруктураИсточника Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя)
	
	ОписаниеРеквизитов = Новый Структура();
	ОписаниеРесурсов = Новый Структура();
	ОписаниеПредопределенных = Новый Структура();
	ОписаниеТабличныхЧастей = Новый Структура();
	ДополнительныеСвойства = Новый Структура();
	
	Связи = Новый Соответствие();
	
	Если ИмяМетаданных(ПолноеИмя) = "Перечисление" Тогда
		ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов);
	Иначе
		ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных);
		ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя,
			ОписаниеРеквизитов, ОписаниеРесурсов, ДополнительныеСвойства, Связи);
		ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);
	
	Для Каждого Обход Из ДополнительныеСвойства Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;
	
	Если 0 < ОписаниеРесурсов.Количество() Тогда
		СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
	КонецЕсли;
	
	Если 0 < ОписаниеПредопределенных.Количество() Тогда
		СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных); 
	КонецЕсли;
	
	Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
		СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей); 
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОписаниеОбъектаМетаданных(ТипОбъекта, АдресОбновления) Экспорт
	
	ОписаниеМетаданных = "";
	
	Части = СтрРазделить(ТипОбъекта, ".");
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(Части[0]);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		ОбъектМетаданных = Метаданные[Части[0]][Части[1]];
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		СтруктураОбъекта = Новый Структура();
		
		Если 0 < СтрНайти(ИмяМетаданных(ПолноеИмя), "ВнешнийИсточникДанных") Тогда
			ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных);
		Иначе
			ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя);
		КонецЕсли;
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СтруктураОбъекта);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		АдресОбновления = ИмяКоллекции + ".items." + ОбъектМетаданных.Имя;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
	КонецЕсли;
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

#КонецОбласти